<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/adapter/PieChartAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/adapter/PieChartAdapter.kt" />
              <option name="originalContent" value="package com.ecss.shb_andriod.adapter&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.github.mikephil.charting.charts.PieChart&#10;import com.github.mikephil.charting.data.PieData&#10;import com.github.mikephil.charting.data.PieDataSet&#10;import com.github.mikephil.charting.data.PieEntry&#10;import com.ecss.shb_andriod.R&#10;&#10;class PieChartAdapter(private val data: List&lt;Pair&lt;String, Float&gt;&gt;) : RecyclerView.Adapter&lt;PieChartAdapter.PieChartViewHolder&gt;() {&#10;    class PieChartViewHolder(view: View) : RecyclerView.ViewHolder(view) {&#10;        val pieChart: PieChart = view.findViewById(R.id.pieChart)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): PieChartViewHolder {&#10;        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_piechart, parent, false)&#10;        return PieChartViewHolder(view).&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: PieChartViewHolder, position: Int) {&#10;        val entries = data.map { PieEntry(it.second, it.first) }&#10;        val dataSet = PieDataSet(entries, &quot;Observations&quot;)&#10;        val pieData = PieData(dataSet)&#10;        holder.pieChart.data = pieData&#10;        holder.pieChart.description.isEnabled = false&#10;        holder.pieChart.setUsePercentValues(true)&#10;        holder.pieChart.invalidate()&#10;    }&#10;&#10;    override fun getItemCount(): Int = 1 // Only one pie chart per adapter&#10;}" />
              <option name="updatedContent" value="package com.ecss.shb_andriod.adapter&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.github.mikephil.charting.charts.PieChart&#10;import com.github.mikephil.charting.data.PieData&#10;import com.github.mikephil.charting.data.PieDataSet&#10;import com.github.mikephil.charting.data.PieEntry&#10;import com.ecss.shb_andriod.R&#10;&#10;class PieChartAdapter(private val data: List&lt;Pair&lt;String, Float&gt;&gt;) : RecyclerView.Adapter&lt;PieChartAdapter.PieChartViewHolder&gt;() {&#10;    class PieChartViewHolder(view: View) : RecyclerView.ViewHolder(view) {&#10;        val pieChart: PieChart = view.findViewById(R.id.pieChart)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): PieChartViewHolder {&#10;        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_piechart, parent, false)&#10;        return PieChartViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: PieChartViewHolder, position: Int) {&#10;        val entries = data.map { PieEntry(it.second, it.first) }&#10;        val dataSet = PieDataSet(entries, &quot;Observations&quot;)&#10;        val pieData = PieData(dataSet)&#10;        holder.pieChart.data = pieData&#10;        holder.pieChart.description.isEnabled = false&#10;        holder.pieChart.setUsePercentValues(true)&#10;        holder.pieChart.invalidate()&#10;    }&#10;&#10;    override fun getItemCount(): Int = 1 // Only one pie chart per adapter&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/base/DrawerAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/base/DrawerAdapter.kt" />
              <option name="originalContent" value="package com.ecss.shb_andriod.base&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.ecss.shb_andriod.R&#10;&#10;class DrawerAdapter(&#10;    private val items: MutableList&lt;DrawerItem&gt;,&#10;    private val onItemClick: (DrawerItem) -&gt; Unit&#10;) : RecyclerView.Adapter&lt;RecyclerView.ViewHolder&gt;() {&#10;&#10;    companion object {&#10;        private const val TYPE_GROUP = 0&#10;        private const val TYPE_CHILD = 1&#10;        private const val TYPE_SIMPLE = 2&#10;    }&#10;&#10;    override fun getItemViewType(position: Int): Int {&#10;        return when (val item = items[position]) {&#10;            is DrawerItem.Group -&gt; TYPE_GROUP&#10;            is DrawerItem.Child -&gt; TYPE_CHILD&#10;            is DrawerItem.Simple -&gt; TYPE_SIMPLE&#10;        }&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {&#10;        return when (viewType) {&#10;            TYPE_GROUP -&gt; GroupViewHolder(&#10;                LayoutInflater.from(parent.context).inflate(R.layout.drawer_item_group, parent, false)&#10;            )&#10;            TYPE_CHILD -&gt; ChildViewHolder(&#10;                LayoutInflater.from(parent.context).inflate(R.layout.drawer_item_child, parent, false)&#10;            )&#10;            TYPE_SIMPLE -&gt; SimpleViewHolder(&#10;                LayoutInflater.from(parent.context).inflate(R.layout.drawer_item_simple, parent, false)&#10;            )&#10;            else -&gt; throw IllegalArgumentException(&quot;Invalid view type&quot;)&#10;        }&#10;    }&#10;&#10;    override fun getItemCount(): Int = items.size&#10;&#10;    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {&#10;        when (val item = items[position]) {&#10;            is DrawerItem.Group -&gt; (holder as GroupViewHolder).bind(item, position)&#10;            is DrawerItem.Child -&gt; (holder as ChildViewHolder).bind(item)&#10;            is DrawerItem.Simple -&gt; (holder as SimpleViewHolder).bind(item)&#10;        }&#10;    }&#10;&#10;    inner class GroupViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        private val icon: ImageView = itemView.findViewById(R.id.icon)&#10;        private val title: TextView = itemView.findViewById(R.id.title)&#10;        fun bind(item: DrawerItem.Group, position: Int) {&#10;            icon.setImageResource(item.iconRes)&#10;            title.text = item.title&#10;            itemView.setOnClickListener {&#10;                if (!item.expanded) {&#10;                    // Collapse all other groups first&#10;                    collapseAllGroups()&#10;                    // Expand this group&#10;                    item.expanded = true&#10;                    items.addAll(position + 1, item.children)&#10;                    notifyItemRangeInserted(position + 1, item.children.size)&#10;                    notifyItemChanged(position)&#10;                } else {&#10;                    // Collapse this group&#10;                    item.expanded = false&#10;                    items.subList(position + 1, position + 1 + item.children.size).clear()&#10;                    notifyItemRangeRemoved(position + 1, item.children.size)&#10;                    notifyItemChanged(position)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    inner class ChildViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        private val icon: ImageView = itemView.findViewById(R.id.icon)&#10;        private val title: TextView = itemView.findViewById(R.id.title)&#10;        fun bind(item: DrawerItem.Child) {&#10;            icon.setImageResource(item.iconRes)&#10;            title.text = item.title&#10;            itemView.setOnClickListener { onItemClick(item) }&#10;        }&#10;    }&#10;&#10;    inner class SimpleViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        private val icon: ImageView = itemView.findViewById(R.id.icon)&#10;        private val title: TextView = itemView.findViewById(R.id.title)&#10;        fun bind(item: DrawerItem.Simple) {&#10;            icon.setImageResource(item.iconRes)&#10;            title.text = item.title&#10;            itemView.setOnClickListener { onItemClick(item) }&#10;        }&#10;    }&#10;&#10;    private fun collapseAllGroups() {&#10;        val groups = items.filterIsInstance&lt;DrawerItem.Group&gt;()&#10;        for (group in groups) {&#10;            if (group.expanded) {&#10;                group.expanded = false&#10;                val index = items.indexOf(group)&#10;                items.subList(index + 1, index + 1 + group.children.size).clear()&#10;                notifyItemRangeRemoved(index + 1, group.children.size)&#10;                notifyItemChanged(index)&#10;            }&#10;        }&#10;    }&#10;" />
              <option name="updatedContent" value="package com.ecss.shb_andriod.base&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.ecss.shb_andriod.R&#10;&#10;class DrawerAdapter(&#10;    private val items: MutableList&lt;DrawerItem&gt;,&#10;    private val onItemClick: (DrawerItem) -&gt; Unit&#10;) : RecyclerView.Adapter&lt;RecyclerView.ViewHolder&gt;() {&#10;&#10;    companion object {&#10;        private const val TYPE_GROUP = 0&#10;        private const val TYPE_CHILD = 1&#10;        private const val TYPE_SIMPLE = 2&#10;    }&#10;&#10;    override fun getItemViewType(position: Int): Int {&#10;        return when (val item = items[position]) {&#10;            is DrawerItem.Group -&gt; TYPE_GROUP&#10;            is DrawerItem.Child -&gt; TYPE_CHILD&#10;            is DrawerItem.Simple -&gt; TYPE_SIMPLE&#10;        }&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {&#10;        return when (viewType) {&#10;            TYPE_GROUP -&gt; GroupViewHolder(&#10;                LayoutInflater.from(parent.context).inflate(R.layout.drawer_item_group, parent, false)&#10;            )&#10;            TYPE_CHILD -&gt; ChildViewHolder(&#10;                LayoutInflater.from(parent.context).inflate(R.layout.drawer_item_child, parent, false)&#10;            )&#10;            TYPE_SIMPLE -&gt; SimpleViewHolder(&#10;                LayoutInflater.from(parent.context).inflate(R.layout.drawer_item_simple, parent, false)&#10;            )&#10;            else -&gt; throw IllegalArgumentException(&quot;Invalid view type&quot;)&#10;        }&#10;    }&#10;&#10;    override fun getItemCount(): Int = items.size&#10;&#10;    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {&#10;        when (val item = items[position]) {&#10;            is DrawerItem.Group -&gt; (holder as GroupViewHolder).bind(item, position)&#10;            is DrawerItem.Child -&gt; (holder as ChildViewHolder).bind(item)&#10;            is DrawerItem.Simple -&gt; (holder as SimpleViewHolder).bind(item)&#10;        }&#10;    }&#10;&#10;    inner class GroupViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        private val icon: ImageView = itemView.findViewById(R.id.icon)&#10;        private val title: TextView = itemView.findViewById(R.id.title)&#10;        fun bind(item: DrawerItem.Group, position: Int) {&#10;            icon.setImageResource(item.iconRes)&#10;            title.text = item.title&#10;            itemView.setOnClickListener {&#10;                if (!item.expanded) {&#10;                    // Collapse all other groups first&#10;                    collapseAllGroups()&#10;                    // Expand this group&#10;                    item.expanded = true&#10;                    items.addAll(position + 1, item.children)&#10;                    notifyItemRangeInserted(position + 1, item.children.size)&#10;                    notifyItemChanged(position)&#10;                } else {&#10;                    // Collapse this group&#10;                    item.expanded = false&#10;                    items.subList(position + 1, position + 1 + item.children.size).clear()&#10;                    notifyItemRangeRemoved(position + 1, item.children.size)&#10;                    notifyItemChanged(position)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    inner class ChildViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        private val icon: ImageView = itemView.findViewById(R.id.icon)&#10;        private val title: TextView = itemView.findViewById(R.id.title)&#10;        fun bind(item: DrawerItem.Child) {&#10;            icon.setImageResource(item.iconRes)&#10;            title.text = item.title&#10;            itemView.setOnClickListener { onItemClick(item) }&#10;        }&#10;    }&#10;&#10;    inner class SimpleViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        private val icon: ImageView = itemView.findViewById(R.id.icon)&#10;        private val title: TextView = itemView.findViewById(R.id.title)&#10;        fun bind(item: DrawerItem.Simple) {&#10;            icon.setImageResource(item.iconRes)&#10;            title.text = item.title&#10;            itemView.setOnClickListener { onItemClick(item) }&#10;        }&#10;    }&#10;&#10;    private fun collapseAllGroups() {&#10;        val groups = items.filterIsInstance&lt;DrawerItem.Group&gt;()&#10;        for (group in groups) {&#10;            if (group.expanded) {&#10;                group.expanded = false&#10;                val index = items.indexOf(group)&#10;                items.subList(index + 1, index + 1 + group.children.size).clear()&#10;                notifyItemRangeRemoved(index + 1, group.children.size)&#10;                notifyItemChanged(index)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun collapseAllGroupsAndNotify() {&#10;        var i = 0&#10;        while (i &lt; items.size) {&#10;            val item = items[i]&#10;            if (item is DrawerItem.Group &amp;&amp; item.expanded) {&#10;                item.expanded = false&#10;                items.subList(i + 1, i + 1 + item.children.size).clear()&#10;                notifyItemRangeRemoved(i + 1, item.children.size)&#10;                notifyItemChanged(i)&#10;            }&#10;            i++&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/base/DrawerItem.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/base/DrawerItem.kt" />
              <option name="updatedContent" value="package com.ecss.shb_andriod.base&#10;&#10;sealed class DrawerItem {&#10;    data class Group(&#10;        val title: String,&#10;        val iconRes: Int,&#10;        val children: List&lt;Child&gt;,&#10;        var expanded: Boolean = false&#10;    ) : DrawerItem()&#10;&#10;    data class Child(&#10;        val title: String,&#10;        val iconRes: Int,&#10;        val id: Int&#10;    ) : DrawerItem()&#10;&#10;    data class Simple(&#10;        val title: String,&#10;        val iconRes: Int,&#10;        val id: Int&#10;    ) : DrawerItem()&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/drawer/DrawerAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/drawer/DrawerAdapter.kt" />
              <option name="updatedContent" value="package com.ecss.shb_andriod.drawer&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.ecss.shb_andriod.R&#10;&#10;class DrawerAdapter(&#10;    private val items: MutableList&lt;DrawerItem&gt;,&#10;    private val onChildClick: (DrawerItem.Child) -&gt; Unit&#10;) : RecyclerView.Adapter&lt;RecyclerView.ViewHolder&gt;() {&#10;&#10;    companion object {&#10;        private const val TYPE_PARENT = 0&#10;        private const val TYPE_CHILD = 1&#10;    }&#10;&#10;    override fun getItemViewType(position: Int): Int {&#10;        return when (items[position]) {&#10;            is DrawerItem.Parent -&gt; TYPE_PARENT&#10;            is DrawerItem.Child -&gt; TYPE_CHILD&#10;        }&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {&#10;        return if (viewType == TYPE_PARENT) {&#10;            val view = LayoutInflater.from(parent.context).inflate(R.layout.drawer_item_parent, parent, false)&#10;            ParentViewHolder(view)&#10;        } else {&#10;            val view = LayoutInflater.from(parent.context).inflate(R.layout.drawer_item_child, parent, false)&#10;            ChildViewHolder(view)&#10;        }&#10;    }&#10;&#10;    override fun getItemCount(): Int = items.size&#10;&#10;    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {&#10;        when (val item = items[position]) {&#10;            is DrawerItem.Parent -&gt; (holder as ParentViewHolder).bind(item, position)&#10;            is DrawerItem.Child -&gt; (holder as ChildViewHolder).bind(item)&#10;        }&#10;    }&#10;&#10;    inner class ParentViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        private val icon: ImageView = itemView.findViewById(R.id.drawerParentIcon)&#10;        private val title: TextView = itemView.findViewById(R.id.drawerParentTitle)&#10;        private val arrow: ImageView = itemView.findViewById(R.id.drawerParentArrow)&#10;        fun bind(item: DrawerItem.Parent, position: Int) {&#10;            icon.setImageResource(item.iconRes)&#10;            title.text = item.title&#10;            arrow.setImageResource(if (item.expanded) R.drawable.ic_arrow_drop_up else R.drawable.ic_arrow_drop_down)&#10;            itemView.setOnClickListener {&#10;                if (item.expanded) {&#10;                    collapse(position, item)&#10;                } else {&#10;                    expand(position, item)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    inner class ChildViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        private val icon: ImageView = itemView.findViewById(R.id.drawerChildIcon)&#10;        private val title: TextView = itemView.findViewById(R.id.drawerChildTitle)&#10;        fun bind(item: DrawerItem.Child) {&#10;            icon.setImageResource(item.iconRes)&#10;            title.text = item.title&#10;            itemView.setOnClickListener { onChildClick(item) }&#10;        }&#10;    }&#10;&#10;    private fun expand(position: Int, parent: DrawerItem.Parent) {&#10;        parent.expanded = true&#10;        items.addAll(position + 1, parent.children)&#10;        notifyItemChanged(position)&#10;        notifyItemRangeInserted(position + 1, parent.children.size)&#10;    }&#10;&#10;    private fun collapse(position: Int, parent: DrawerItem.Parent) {&#10;        parent.expanded = false&#10;        val count = parent.children.size&#10;        for (i in 0 until count) items.removeAt(position + 1)&#10;        notifyItemChanged(position)&#10;        notifyItemRangeRemoved(position + 1, count)&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/drawer/DrawerItem.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/drawer/DrawerItem.kt" />
              <option name="updatedContent" value="package com.ecss.shb_andriod.drawer&#10;&#10;sealed class DrawerItem {&#10;    data class Parent(val title: String, val iconRes: Int, var expanded: Boolean = false, val children: List&lt;Child&gt; = emptyList()) : DrawerItem()&#10;    data class Child(val title: String, val iconRes: Int, val navId: Int) : DrawerItem()&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/pages/ChartDataViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/pages/ChartDataViewModel.kt" />
              <option name="originalContent" value="package com.ecss.shb_andriod.pages&#10;&#10;import androidx.lifecycle.LiveData&#10;import androidx.lifecycle.MutableLiveData&#10;import androidx.lifecycle.ViewModel&#10;import com.ecss.shb_andriod.model.Survey&#10;&#10;class ChartDataViewModel : ViewModel() {&#10;    private val _surveys = MutableLiveData&lt;List&lt;Survey&gt;&gt;()&#10;    val surveys: LiveData&lt;List&lt;Survey&gt;&gt; = _surveys&#10;&#10;    fun setSurveys(surveys: List&lt;Survey&gt;) {&#10;        _surveys.value = surveys&#10;    }&#10;&#10;    // Helper to get location counts for PieChart&#10;    fun getLocationCounts(): Map&lt;String, Int&gt; {&#10;        return _surveys.value?.groupingBy { it.location ?: &quot;Unknown&quot; }?.eachCount() ?: emptyMap()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ecss.shb_andriod.pages&#10;&#10;import androidx.lifecycle.LiveData&#10;import androidx.lifecycle.MutableLiveData&#10;import androidx.lifecycle.ViewModel&#10;import com.ecss.shb_andriod.model.Survey&#10;&#10;class ChartDataViewModel : ViewModel() {&#10;    private val _surveys = MutableLiveData&lt;List&lt;Survey&gt;&gt;()&#10;    val surveys: LiveData&lt;List&lt;Survey&gt;&gt; = _surveys&#10;&#10;    fun setSurveys(surveys: List&lt;Survey&gt;) {&#10;        _surveys.value = surveys&#10;    }&#10;&#10;    // Helper to get location counts for PieChart&#10;    fun getLocationCounts(): Map&lt;String, Int&gt; {&#10;        return _surveys.value?.groupingBy { it.location ?: &quot;Unknown&quot; }?.eachCount() ?: emptyMap()&#10;    }&#10;&#10;    // Helper to get PieEntry list for PieChart (by location)&#10;    fun getPieEntriesByLocation(): List&lt;com.github.mikephil.charting.data.PieEntry&gt; {&#10;        return getLocationCounts().map { (location, count) -&gt;&#10;            com.github.mikephil.charting.data.PieEntry(count.toFloat(), location)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/pages/LineChartFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/pages/LineChartFragment.kt" />
              <option name="updatedContent" value="package com.ecss.shb_andriod.pages&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.fragment.app.Fragment&#10;import com.ecss.shb_andriod.R&#10;import com.ecss.shb_andriod.view.LineChartView&#10;&#10;class LineChartFragment : Fragment() {&#10;    lateinit var lineChartView: LineChartView&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?&#10;    ): View? {&#10;        val view = inflater.inflate(R.layout.fragment_line_chart, container, false)&#10;        lineChartView = view.findViewById(R.id.lineChartView)&#10;        return view&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/pages/MapActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/pages/MapActivity.kt" />
              <option name="originalContent" value="package com.ecss.shb_andriod.pages&#10;&#10;&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.ecss.shb_andriod.model.PurposeRequest&#10;import com.ecss.shb_andriod.model.Survey&#10;import com.ecss.shb_andriod.view.MapViewContainer&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;class MapActivity : AppCompatActivity() {&#10;class MapActivity : AppCompatActivity() {&#10;    private var mapViewContainer: MapViewContainer? = null&#10;    private var isLive = false&#10;    private var liveStatusTextView: TextView? = null&#10;    private var liveUpdateHandler: android.os.Handler? = null&#10;    private var liveUpdateRunnable: Runnable? = null&#10;    private var surveys: List&lt;Survey&gt; = emptyList() // &lt;-- Add this property&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        // Hide the status bar and make the activity full screen&#10;        window.decorView.systemUiVisibility = (&#10;                android.view.View.SYSTEM_UI_FLAG_FULLSCREEN or&#10;                        android.view.View.SYSTEM_UI_FLAG_LAYOUT_STABLE or&#10;                        android.view.View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION or&#10;                        android.view.View.SYSTEM_UI_FLAG_HIDE_NAVIGATION or&#10;                        android.view.View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY&#10;                )&#10;        actionBar?.hide()&#10;        actionBar?.hide()&#10;        setContentView(R.layout.activity_map)&#10;        setContentView(R.layout.activity_map)&#10;        setContentView(R.layout.activity_map)&#10;        setContentView(R.layout.activity_map)&#10;        setContentView(R.layout.activity_map)&#10;        setContentView(R.layout.activity_map)&#10;        setContentView(R.layout.activity_map)&#10;        setContentView(R.layout.activity_map)&#10;        setContentView(R.layout.activity_map)&#10;        setContentView(R.layout.activity_map)&#10;        setContentView(R.layout.activity_map)&#10;        setContentView(R.layout.activity_map)&#10;        setContentView(R.layout.activity_map)&#10;        setContentView(R.layout.activity_map)&#10;        setContentView(R.layout.activity_map)&#10;        setContentView(R.layout.activity_map)&#10;        mapViewContainer = findViewById(R.id.mapViewContainer)&#10;        mapViewContainer?.onCreate(savedInstanceState)&#10;        // Set up zoom level and live status listener&#10;        mapViewContainer?.setOnZoomLevelChangeListener(object : MapViewContainer.OnZoomLevelChangeListener {&#10;            override fun onZoomLevelChanged(zoom: Float) {&#10;                val zoomTextView = findViewById&lt;TextView&gt;(R.id.tvMapZoomLevel)&#10;                zoomTextView?.text = &quot;Zoom: ${String.format(&quot;%.1f&quot;, zoom)}&quot;&#10;            }&#10;        })&#10;&#10;        // Clear More Information section on load&#10;        findViewById&lt;TextView&gt;(R.id.tvMoreInfoContent)?.text = &quot;Tap a marker to see more information.&quot;&#10;&#10;        getAllSurveys() // Fetch surveys and update statistics/markers&#10;    }&#10;&#10;    private fun getAllSurveys() {&#10;        CoroutineScope(Dispatchers.IO).launch {&#10;            try {&#10;                val retrofit = Retrofit.Builder()&#10;                    .baseUrl(&quot;https://shb-backend.azurewebsites.net/&quot;)&#10;                    .addConverterFactory(GsonConverterFactory.create())&#10;                    .build()&#10;                val surveyApi = retrofit.create(SurveyApi::class.java)&#10;                val request = PurposeRequest(purpose = &quot;retrieveAndriod&quot;)&#10;                val response = withContext(Dispatchers.IO) { surveyApi.getSurveysRaw(request) }&#10;                surveys = response.result?.surveys ?: emptyList&lt;Survey&gt;()&#10;                Log.d(&quot;MapViewContainer&quot;, &quot;Retrieved &quot;+surveys)&#10;                surveys.forEachIndexed { index, survey -&gt;&#10;                    Log.d(&quot;SurveyLatLong&quot;, &quot;Survey #${index + 1}: Lat=${survey.lat}, Long=${survey.long}&quot;)&#10;                }&#10;                withContext(Dispatchers.Main) {&#10;                    // Update statistics in the legend&#10;                    val locationCount = surveys.size&#10;                    val seenCount = surveys.count { it.seenHeard.equals(&quot;Seen&quot;, ignoreCase = true) }&#10;                    val heardCount = surveys.count { it.seenHeard.equals(&quot;Heard&quot;, ignoreCase = true) }&#10;                    val notFoundCount = surveys.count { it.seenHeard.equals(&quot;Not Found&quot;, ignoreCase = true) }&#10;                    findViewById&lt;TextView&gt;(R.id.tvLegendStatsLocation).text = &quot;Locations: $locationCount&quot;&#10;                    findViewById&lt;TextView&gt;(R.id.tvLegendStatsSeen).text = &quot;Seen: $seenCount&quot;&#10;                    findViewById&lt;TextView&gt;(R.id.tvLegendStatsHeard).text = &quot;Heard: $heardCount&quot;&#10;                    findViewById&lt;TextView&gt;(R.id.tvLegendStatsNotFound).text = &quot;Not Found: $notFoundCount&quot;&#10;                    mapViewContainer?.setSurveys(surveys)&#10;                }&#10;            } catch (e: Exception) {&#10;                withContext(Dispatchers.Main) {&#10;                    // Handle error (show a message, etc.)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Render survey markers on the map using the current list of surveys.&#10;     * This is a stub. You should implement marker rendering logic here.&#10;     */&#10;    private fun renderSurveyMarkers() {&#10;        // Example: If your MapViewContainer has a method to add markers, call it here&#10;        // mapViewContainer?.addSurveyMarkers(surveys)&#10;        // For now, just log the surveys&#10;        Log.d(&quot;MapActivity&quot;, &quot;Rendering ${surveys.size} survey markers on the map.&quot;)&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        mapViewContainer?.onResume()&#10;    }&#10;&#10;    override fun onPause() {&#10;        mapViewContainer?.onPause()&#10;        super.onPause()&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        mapViewContainer?.onDestroy()&#10;        super.onDestroy()&#10;    }&#10;&#10;    override fun onLowMemory() {&#10;        super.onLowMemory()&#10;        mapViewContainer?.onLowMemory()&#10;    }&#10;&#10;    override fun onSaveInstanceState(outState: Bundle) {&#10;        super.onSaveInstanceState(outState)&#10;        mapViewContainer?.onSaveInstanceState(outState)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ecss.shb_andriod.pages&#10;&#10;&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.widget.TextView&#10;import com.ecss.shb_andriod.R&#10;import com.ecss.shb_andriod.api.SurveyApi&#10;import com.ecss.shb_andriod.base.BaseActivity&#10;import com.ecss.shb_andriod.model.PurposeRequest&#10;import com.ecss.shb_andriod.model.Survey&#10;import com.ecss.shb_andriod.view.MapViewContainer&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;&#10;class MapActivity : BaseActivity() {&#10;    private var mapViewContainer: MapViewContainer? = null&#10;    private var isLive = false&#10;    private var liveStatusTextView: TextView? = null&#10;    private var liveUpdateHandler: android.os.Handler? = null&#10;    private var liveUpdateRunnable: Runnable? = null&#10;    private var surveys: List&lt;Survey&gt; = emptyList() // &lt;-- Add this property&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        // Hide the status bar and make the activity full screen&#10;        window.decorView.systemUiVisibility = (&#10;                android.view.View.SYSTEM_UI_FLAG_FULLSCREEN or&#10;                        android.view.View.SYSTEM_UI_FLAG_LAYOUT_STABLE or&#10;                        android.view.View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION or&#10;                        android.view.View.SYSTEM_UI_FLAG_HIDE_NAVIGATION or&#10;                        android.view.View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY&#10;                )&#10;        supportActionBar?.hide()&#10;        setupDrawerAndToolbar(R.layout.activity_map)&#10;        mapViewContainer = findViewById(R.id.mapViewContainer)&#10;        mapViewContainer?.onCreate(savedInstanceState)&#10;        // Set up zoom level and live status listener&#10;        mapViewContainer?.setOnZoomLevelChangeListener(object : MapViewContainer.OnZoomLevelChangeListener {&#10;            override fun onZoomLevelChanged(zoom: Float) {&#10;                val zoomTextView = findViewById&lt;TextView&gt;(R.id.tvMapZoomLevel)&#10;                zoomTextView?.text = &quot;Zoom: ${String.format(&quot;%.1f&quot;, zoom)}&quot;&#10;            }&#10;        })&#10;&#10;        // Clear More Information section on load&#10;        findViewById&lt;TextView&gt;(R.id.tvMoreInfoContent)?.text = &quot;Tap a marker to see more information.&quot;&#10;&#10;        getAllSurveys() // Fetch surveys and update statistics/markers&#10;    }&#10;&#10;    private fun getAllSurveys() {&#10;        CoroutineScope(Dispatchers.IO).launch {&#10;            try {&#10;                val retrofit = Retrofit.Builder()&#10;                    .baseUrl(&quot;https://shb-backend.azurewebsites.net/&quot;)&#10;                    .addConverterFactory(GsonConverterFactory.create())&#10;                    .build()&#10;                val surveyApi = retrofit.create(SurveyApi::class.java)&#10;                val request = PurposeRequest(purpose = &quot;retrieveAndriod&quot;)&#10;                val response = withContext(Dispatchers.IO) { surveyApi.getSurveysRaw(request) }&#10;                surveys = response.result?.surveys ?: emptyList&lt;Survey&gt;()&#10;                Log.d(&quot;MapViewContainer&quot;, &quot;Retrieved &quot;+surveys)&#10;                surveys.forEachIndexed { index, survey -&gt;&#10;                    Log.d(&quot;SurveyLatLong&quot;, &quot;Survey #${index + 1}: Lat=${survey.lat}, Long=${survey.long}&quot;)&#10;                }&#10;                withContext(Dispatchers.Main) {&#10;                    // Update statistics in the legend&#10;                    val locationCount = surveys.size&#10;                    val seenCount = surveys.count { it.seenHeard.equals(&quot;Seen&quot;, ignoreCase = true) }&#10;                    val heardCount = surveys.count { it.seenHeard.equals(&quot;Heard&quot;, ignoreCase = true) }&#10;                    val notFoundCount = surveys.count { it.seenHeard.equals(&quot;Not Found&quot;, ignoreCase = true) }&#10;                    findViewById&lt;TextView&gt;(R.id.tvLegendStatsLocation).text = &quot;Locations: $locationCount&quot;&#10;                    findViewById&lt;TextView&gt;(R.id.tvLegendStatsSeen).text = &quot;Seen: $seenCount&quot;&#10;                    findViewById&lt;TextView&gt;(R.id.tvLegendStatsHeard).text = &quot;Heard: $heardCount&quot;&#10;                    findViewById&lt;TextView&gt;(R.id.tvLegendStatsNotFound).text = &quot;Not Found: $notFoundCount&quot;&#10;                    mapViewContainer?.setSurveys(surveys)&#10;                }&#10;            } catch (e: Exception) {&#10;                withContext(Dispatchers.Main) {&#10;                    // Handle error (show a message, etc.)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Render survey markers on the map using the current list of surveys.&#10;     * This is a stub. You should implement marker rendering logic here.&#10;     */&#10;    private fun renderSurveyMarkers() {&#10;        // Example: If your MapViewContainer has a method to add markers, call it here&#10;        // mapViewContainer?.addSurveyMarkers(surveys)&#10;        // For now, just log the surveys&#10;        Log.d(&quot;MapActivity&quot;, &quot;Rendering ${surveys.size} survey markers on the map.&quot;)&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        mapViewContainer?.onResume()&#10;    }&#10;&#10;    override fun onPause() {&#10;        mapViewContainer?.onPause()&#10;        super.onPause()&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        mapViewContainer?.onDestroy()&#10;        super.onDestroy()&#10;    }&#10;&#10;    override fun onLowMemory() {&#10;        super.onLowMemory()&#10;        mapViewContainer?.onLowMemory()&#10;    }&#10;&#10;    override fun onSaveInstanceState(outState: Bundle) {&#10;        super.onSaveInstanceState(outState)&#10;        mapViewContainer?.onSaveInstanceState(outState)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/pages/PieChartFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/pages/PieChartFragment.kt" />
              <option name="originalContent" value="package com.ecss.shb_andriod.pages&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.TextView&#10;import androidx.fragment.app.Fragment&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.lifecycle.Observer&#10;import com.ecss.shb_andriod.R&#10;import com.ecss.shb_andriod.view.PieChartView&#10;&#10;class PieChartFragment : Fragment() {&#10;    lateinit var pieChartView: PieChartView&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?&#10;    ): View? {&#10;        val view = inflater.inflate(R.layout.fragment_pie_chart, container, false)&#10;        pieChartView = view.findViewById(R.id.pieChartView)&#10;        return view&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        val chartDataViewModel = ViewModelProvider(requireActivity())[ChartDataViewModel::class.java]&#10;        chartDataViewModel.pieEntries.observe(viewLifecycleOwner, Observer { entries -&gt;&#10;            if (entries != null &amp;&amp; entries.isNotEmpty()) {&#10;                // Group by location and count&#10;                val locationCounts = entries.groupBy { it.label ?: &quot;Unknown&quot; }&#10;                    .mapValues { it.value.sumOf { entry -&gt; entry.value.toInt() } }&#10;                val pieEntries = locationCounts.map { (location, count) -&gt;&#10;                    com.github.mikephil.charting.data.PieEntry(count.toFloat(), location)&#10;                }&#10;                pieChartView.showPieChart(pieEntries)&#10;                pieChartView.visibility = View.VISIBLE&#10;                view.findViewById&lt;View&gt;(R.id.tvNoData)?.visibility = View.GONE&#10;            } else {&#10;                pieChartView.visibility = View.GONE&#10;                // Show a message if no data&#10;                val tvNoData = view.findViewById&lt;TextView?&gt;(R.id.tvNoData)&#10;                tvNoData?.visibility = View.VISIBLE&#10;            }&#10;        })&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ecss.shb_andriod.pages&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.TextView&#10;import androidx.fragment.app.Fragment&#10;import androidx.lifecycle.ViewModelProvider&#10;import com.ecss.shb_andriod.R&#10;import com.ecss.shb_andriod.view.PieChartView&#10;&#10;class PieChartFragment : Fragment() {&#10;    lateinit var pieChartView: PieChartView&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?&#10;    ): View? {&#10;        val view = inflater.inflate(R.layout.fragment_pie_chart, container, false)&#10;        pieChartView = view.findViewById(R.id.pieChartView)&#10;        return view&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        val chartDataViewModel = ViewModelProvider(requireActivity())[ChartDataViewModel::class.java]&#10;        chartDataViewModel.surveys.observe(viewLifecycleOwner) { surveys -&gt;&#10;            val pieEntries = chartDataViewModel.getPieEntriesByLocation()&#10;            if (pieEntries.isNotEmpty()) {&#10;                pieChartView.showPieChart(pieEntries)&#10;                pieChartView.visibility = View.VISIBLE&#10;                view.findViewById&lt;View&gt;(R.id.tvNoData)?.visibility = View.GONE&#10;            } else {&#10;                pieChartView.visibility = View.GONE&#10;                // Show a message if no data&#10;                val tvNoData = view.findViewById&lt;TextView?&gt;(R.id.tvNoData)&#10;                tvNoData?.visibility = View.VISIBLE&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/pages/SurveyActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/pages/SurveyActivity.kt" />
              <option name="originalContent" value="package com.ecss.shb_andriod.pages&#10;&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.View&#10;import android.widget.Button&#10;import android.widget.ImageButton&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.ecss.shb_andriod.model.PurposeRequest&#10;import com.ecss.shb_andriod.model.Survey&#10;import com.ecss.shb_andriod.view.FullView&#10;import com.ecss.shb_andriod.view.LoadingView&#10;import com.ecss.shb_andriod.view.footer_pages_view&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;class SurveyActivity : AppCompatActivity() {&#10;class SurveyActivity : AppCompatActivity() {&#10;&#10;    private var currentPage = 1&#10;    private var surveys: List&lt;Survey&gt; = emptyList()&#10;    private var isPaginatedView = false&#10;    private var loadingView: LoadingView? = null&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        // Make activity full screen by default&#10;        window.decorView.systemUiVisibility = (&#10;                View.SYSTEM_UI_FLAG_LAYOUT_STABLE&#10;                        or View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN&#10;                        or View.SYSTEM_UI_FLAG_FULLSCREEN&#10;                        or View.SYSTEM_UI_FLAG_HIDE_NAVIGATION&#10;                        or View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY&#10;                )&#10;        setContentView(R.layout.activity_survey)&#10;        val footerControls = findViewById&lt;footer_pages_view&gt;(R.id.footerControls)&#10;        footerControls.visibility = View.GONE // Hide footer by default&#10;        // Remove cardsPerPagesView listeners and logic&#10;        // Use Spinner (selectBox) for cards per page selection&#10;        getAllSurveys()&#10;&#10;        val selectBox = findViewById&lt;android.widget.Spinner&gt;(R.id.spinnerCardsPerPage)&#10;        footerControls.btnPrevPage.setOnClickListener {&#10;            val pageSize = selectBox.selectedItem?.toString()?.toIntOrNull() ?: 5&#10;            ((surveys.size + pageSize - 1) / pageSize).coerceAtLeast(1)&#10;            if (currentPage &gt; 1) {&#10;                currentPage--&#10;                showPaginatedView(pageSize)&#10;                updatePageInfo(pageSize)&#10;            }&#10;        }&#10;        footerControls.btnNextPage.setOnClickListener {&#10;            val pageSize = selectBox.selectedItem?.toString()?.toIntOrNull() ?: 5&#10;            val totalPages = ((surveys.size + pageSize - 1) / pageSize).coerceAtLeast(1)&#10;            if (currentPage &lt; totalPages) {&#10;                currentPage++&#10;                showPaginatedView(pageSize)&#10;                updatePageInfo(pageSize)&#10;            }&#10;        }&#10;        footerControls.btnFirstPage.setOnClickListener {&#10;            val pageSize = selectBox.selectedItem?.toString()?.toIntOrNull() ?: 5&#10;            currentPage = 1&#10;            showPaginatedView(pageSize)&#10;            updatePageInfo(pageSize)&#10;        }&#10;        footerControls.btnLastPage.setOnClickListener {&#10;            val pageSize = selectBox.selectedItem?.toString()?.toIntOrNull() ?: 5&#10;            val totalPages = ((surveys.size + pageSize - 1) / pageSize).coerceAtLeast(1)&#10;            currentPage = totalPages&#10;            showPaginatedView(pageSize)&#10;            updatePageInfo(pageSize)&#10;        }&#10;        val btnHome = findViewById&lt;ImageButton&gt;(R.id.btnHome)&#10;        btnHome.setOnClickListener {&#10;            val intent = android.content.Intent(this, MainPage::class.java)&#10;            intent.addFlags(android.content.Intent.FLAG_ACTIVITY_CLEAR_TOP or android.content.Intent.FLAG_ACTIVITY_NEW_TASK)&#10;            startActivity(intent)&#10;            finish()&#10;        }&#10;        // Toggle between paginated and full view&#10;        val btnToggleViewMode = findViewById&lt;Button&gt;(R.id.btnToggleViewMode)&#10;        // val selectBox = findViewById&lt;android.widget.Spinner&gt;(R.id.spinnerCardsPerPage)&#10;        var paginatedMode = false&#10;        btnToggleViewMode.setOnClickListener {&#10;            paginatedMode = !paginatedMode&#10;            btnToggleViewMode.text = if (paginatedMode) &quot;Full View&quot; else &quot;Paginated View&quot;&#10;            val selectBox = findViewById&lt;android.widget.Spinner&gt;(R.id.spinnerCardsPerPage)&#10;            val labelCardsPerPage = findViewById&lt;TextView&gt;(R.id.labelCardsPerPage)&#10;            // Always hide CardsPerPagesView (textbox)&#10;            // Only show 4 options in select box&#10;            val maxValue = surveys.size&#10;            val values = mutableListOf&lt;String&gt;()&#10;            val step = if (maxValue &gt;= 4) maxValue / 4 else 1&#10;            for (i in 1..4) {&#10;                val value = (i * step).coerceAtMost(maxValue)&#10;                values.add(value.toString())&#10;            }&#10;            val adapter = android.widget.ArrayAdapter(this, android.R.layout.simple_spinner_item, values)&#10;            adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;            selectBox.adapter = adapter&#10;            selectBox.setSelection(0)&#10;            selectBox.visibility = if (paginatedMode) View.VISIBLE else View.GONE&#10;            labelCardsPerPage.visibility = if (paginatedMode) View.VISIBLE else View.GONE&#10;            val pageSize = selectBox.selectedItem?.toString()?.toIntOrNull() ?: 4&#10;            if (paginatedMode) {&#10;                showPaginatedView(pageSize)&#10;                updatePageInfo(pageSize)&#10;                val footerControls = findViewById&lt;footer_pages_view&gt;(R.id.footerControls)&#10;                footerControls.visibility = View.VISIBLE&#10;            } else {&#10;                showFullView(surveys)&#10;                val footerControls = findViewById&lt;footer_pages_view&gt;(R.id.footerControls)&#10;                footerControls.visibility = View.GONE&#10;            }&#10;        }&#10;        selectBox.onItemSelectedListener = object : android.widget.AdapterView.OnItemSelectedListener {&#10;            override fun onItemSelected(parent: android.widget.AdapterView&lt;*&gt;, view: View?, position: Int, id: Long) {&#10;                if (paginatedMode) {&#10;                    val pageSize = selectBox.selectedItem?.toString()?.toIntOrNull() ?: 4&#10;                    currentPage = 1 // Reset to first page when changing page size&#10;                    showPaginatedView(pageSize)&#10;                    updatePageInfo(pageSize)&#10;                }&#10;            }&#10;            override fun onNothingSelected(parent: android.widget.AdapterView&lt;*&gt;) {}&#10;        }&#10;        // Remove references to spinnerCardsPerPage, labelCardsPerPage&#10;    }&#10;&#10;    private fun getAllSurveys() {&#10;        showLoadingDialog()&#10;        CoroutineScope(Dispatchers.Main).launch {&#10;            // Fetch surveys from backend using Retrofit&#10;            val retrofit = Retrofit.Builder()&#10;                .baseUrl(&quot;https://shb-backend.azurewebsites.net/&quot;)&#10;                .addConverterFactory(GsonConverterFactory.create())&#10;                .build()&#10;            val surveyApi = retrofit.create(SurveyApi::class.java)&#10;            val request = PurposeRequest(purpose = &quot;retrieveAndriod&quot;)&#10;            val response = withContext(Dispatchers.IO) { surveyApi.getSurveysRaw(request) }&#10;            surveys = response.result?.surveys ?: emptyList()&#10;            Log.d(&quot;SurveyActivity&quot;, &quot;Fetched ${surveys.size} surveys&quot;)&#10;            hideLoadingDialog()&#10;&#10;            if (isPaginatedView) {&#10;                val selectBox = findViewById&lt;android.widget.Spinner&gt;(R.id.spinnerCardsPerPage)&#10;                val pageSize = selectBox.selectedItem?.toString()?.toIntOrNull() ?: 5&#10;                showPaginatedView(pageSize)&#10;            } else {&#10;                showFullView(surveys)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun showFullView(surveys: List&lt;Survey&gt;) {&#10;        val surveyCardContainer: android.widget.LinearLayout = findViewById(R.id.surveyCardContainer)&#10;        val rvSurveys: androidx.recyclerview.widget.RecyclerView = findViewById(R.id.rvSurveys)&#10;        val footerControls = findViewById&lt;footer_pages_view&gt;(R.id.footerControls)&#10;        surveyCardContainer.visibility = View.VISIBLE&#10;        rvSurveys.visibility = View.GONE&#10;        footerControls.visibility = View.GONE&#10;        FullView().displaySurveysAsCards(this, surveyCardContainer, surveys)&#10;    }&#10;&#10;    private fun showPaginatedView(pageSize: Int) {&#10;        val surveyCardContainer: android.widget.LinearLayout = findViewById(R.id.surveyCardContainer)&#10;        val rvSurveys: androidx.recyclerview.widget.RecyclerView = findViewById(R.id.rvSurveys)&#10;        val footerControls = findViewById&lt;footer_pages_view&gt;(R.id.footerControls)&#10;        val selectBox = findViewById&lt;android.widget.Spinner&gt;(R.id.spinnerCardsPerPage)&#10;        // Set continuous card index options for paginated view&#10;        // val actualPageSize = cardsPerPagesView.getSelectedValue().trim().toIntOrNull()?.takeIf { it &gt; 0 } ?: pageSize&#10;        val actualPageSize = selectBox.selectedItem?.toString()?.toIntOrNull() ?: pageSize&#10;        surveyCardContainer.visibility = View.VISIBLE&#10;        rvSurveys.visibility = View.GONE&#10;        footerControls.visibility = View.VISIBLE&#10;        // Fetch paginated surveys from backend&#10;        CoroutineScope(Dispatchers.Main).launch {&#10;            val pageSurveys = withContext(Dispatchers.IO) {&#10;                com.ecss.shb_andriod.view.PaginatedView().getPaginatedSurveys(currentPage, actualPageSize)&#10;            }&#10;            val startIndex = (currentPage - 1) * actualPageSize&#10;            FullView().displaySurveysAsCards(this@SurveyActivity, surveyCardContainer, pageSurveys, startIndex)&#10;            updatePageInfo(actualPageSize)&#10;        }&#10;    }&#10;&#10;    private fun updatePageInfo(pageSize: Int) {&#10;        val footerControls = findViewById&lt;footer_pages_view&gt;(R.id.footerControls)&#10;        val tvPageInfo = footerControls.findViewById&lt;android.widget.TextView&gt;(R.id.tvPageInfo)&#10;        val totalPages = ((surveys.size + pageSize - 1) / pageSize).coerceAtLeast(1)&#10;        tvPageInfo.text = &quot;Page $currentPage of $totalPages&quot;&#10;    }&#10;&#10;    private fun showLoadingDialog() {&#10;        loadingView?.show()&#10;    }&#10;&#10;    private fun hideLoadingDialog() {&#10;        loadingView?.hide()&#10;    }&#10;&#10;}" />
              <option name="updatedContent" value="package com.ecss.shb_andriod.pages&#10;&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.View&#10;import android.widget.Button&#10;import android.widget.ImageButton&#10;import android.widget.TextView&#10;import com.ecss.shb_andriod.R&#10;import com.ecss.shb_andriod.api.SurveyApi&#10;import com.ecss.shb_andriod.base.BaseActivity&#10;import com.ecss.shb_andriod.model.PurposeRequest&#10;import com.ecss.shb_andriod.model.Survey&#10;import com.ecss.shb_andriod.view.FullView&#10;import com.ecss.shb_andriod.view.LoadingView&#10;import com.ecss.shb_andriod.view.footer_pages_view&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;&#10;class SurveyActivity : BaseActivity() {&#10;&#10;    private var currentPage = 1&#10;    private var surveys: List&lt;Survey&gt; = emptyList()&#10;    private var isPaginatedView = false&#10;    private var loadingView: LoadingView? = null&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        // Make activity full screen by default&#10;        window.decorView.systemUiVisibility = (&#10;                View.SYSTEM_UI_FLAG_LAYOUT_STABLE&#10;                        or View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN&#10;                        or View.SYSTEM_UI_FLAG_FULLSCREEN&#10;                        or View.SYSTEM_UI_FLAG_HIDE_NAVIGATION&#10;                        or View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY&#10;                )&#10;        setupDrawerAndToolbar(R.layout.activity_survey)&#10;        val footerControls = findViewById&lt;footer_pages_view&gt;(R.id.footerControls)&#10;        footerControls.visibility = View.GONE // Hide footer by default&#10;        // Remove cardsPerPagesView listeners and logic&#10;        // Use Spinner (selectBox) for cards per page selection&#10;        getAllSurveys()&#10;&#10;        val selectBox = findViewById&lt;android.widget.Spinner&gt;(R.id.spinnerCardsPerPage)&#10;        footerControls.btnPrevPage.setOnClickListener {&#10;            val pageSize = selectBox.selectedItem?.toString()?.toIntOrNull() ?: 5&#10;            ((surveys.size + pageSize - 1) / pageSize).coerceAtLeast(1)&#10;            if (currentPage &gt; 1) {&#10;                currentPage--&#10;                showPaginatedView(pageSize)&#10;                updatePageInfo(pageSize)&#10;            }&#10;        }&#10;        footerControls.btnNextPage.setOnClickListener {&#10;            val pageSize = selectBox.selectedItem?.toString()?.toIntOrNull() ?: 5&#10;            val totalPages = ((surveys.size + pageSize - 1) / pageSize).coerceAtLeast(1)&#10;            if (currentPage &lt; totalPages) {&#10;                currentPage++&#10;                showPaginatedView(pageSize)&#10;                updatePageInfo(pageSize)&#10;            }&#10;        }&#10;        footerControls.btnFirstPage.setOnClickListener {&#10;            val pageSize = selectBox.selectedItem?.toString()?.toIntOrNull() ?: 5&#10;            currentPage = 1&#10;            showPaginatedView(pageSize)&#10;            updatePageInfo(pageSize)&#10;        }&#10;        footerControls.btnLastPage.setOnClickListener {&#10;            val pageSize = selectBox.selectedItem?.toString()?.toIntOrNull() ?: 5&#10;            val totalPages = ((surveys.size + pageSize - 1) / pageSize).coerceAtLeast(1)&#10;            currentPage = totalPages&#10;            showPaginatedView(pageSize)&#10;            updatePageInfo(pageSize)&#10;        }&#10;        val btnHome = findViewById&lt;ImageButton&gt;(R.id.btnHome)&#10;        btnHome.setOnClickListener {&#10;            val intent = android.content.Intent(this, MainPage::class.java)&#10;            intent.addFlags(android.content.Intent.FLAG_ACTIVITY_CLEAR_TOP or android.content.Intent.FLAG_ACTIVITY_NEW_TASK)&#10;            startActivity(intent)&#10;            finish()&#10;        }&#10;        // Toggle between paginated and full view&#10;        val btnToggleViewMode = findViewById&lt;Button&gt;(R.id.btnToggleViewMode)&#10;        // val selectBox = findViewById&lt;android.widget.Spinner&gt;(R.id.spinnerCardsPerPage)&#10;        var paginatedMode = false&#10;        btnToggleViewMode.setOnClickListener {&#10;            paginatedMode = !paginatedMode&#10;            btnToggleViewMode.text = if (paginatedMode) &quot;Full View&quot; else &quot;Paginated View&quot;&#10;            val selectBox = findViewById&lt;android.widget.Spinner&gt;(R.id.spinnerCardsPerPage)&#10;            val labelCardsPerPage = findViewById&lt;TextView&gt;(R.id.labelCardsPerPage)&#10;            // Always hide CardsPerPagesView (textbox)&#10;            // Only show 4 options in select box&#10;            val maxValue = surveys.size&#10;            val values = mutableListOf&lt;String&gt;()&#10;            val step = if (maxValue &gt;= 4) maxValue / 4 else 1&#10;            for (i in 1..4) {&#10;                val value = (i * step).coerceAtMost(maxValue)&#10;                values.add(value.toString())&#10;            }&#10;            val adapter = android.widget.ArrayAdapter(this, android.R.layout.simple_spinner_item, values)&#10;            adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;            selectBox.adapter = adapter&#10;            selectBox.setSelection(0)&#10;            selectBox.visibility = if (paginatedMode) View.VISIBLE else View.GONE&#10;            labelCardsPerPage.visibility = if (paginatedMode) View.VISIBLE else View.GONE&#10;            val pageSize = selectBox.selectedItem?.toString()?.toIntOrNull() ?: 4&#10;            if (paginatedMode) {&#10;                showPaginatedView(pageSize)&#10;                updatePageInfo(pageSize)&#10;                val footerControls = findViewById&lt;footer_pages_view&gt;(R.id.footerControls)&#10;                footerControls.visibility = View.VISIBLE&#10;            } else {&#10;                showFullView(surveys)&#10;                val footerControls = findViewById&lt;footer_pages_view&gt;(R.id.footerControls)&#10;                footerControls.visibility = View.GONE&#10;            }&#10;        }&#10;        selectBox.onItemSelectedListener = object : android.widget.AdapterView.OnItemSelectedListener {&#10;            override fun onItemSelected(parent: android.widget.AdapterView&lt;*&gt;, view: View?, position: Int, id: Long) {&#10;                if (paginatedMode) {&#10;                    val pageSize = selectBox.selectedItem?.toString()?.toIntOrNull() ?: 4&#10;                    currentPage = 1 // Reset to first page when changing page size&#10;                    showPaginatedView(pageSize)&#10;                    updatePageInfo(pageSize)&#10;                }&#10;            }&#10;            override fun onNothingSelected(parent: android.widget.AdapterView&lt;*&gt;) {}&#10;        }&#10;        // Remove references to spinnerCardsPerPage, labelCardsPerPage&#10;    }&#10;&#10;    private fun getAllSurveys() {&#10;        showLoadingDialog()&#10;        CoroutineScope(Dispatchers.Main).launch {&#10;            // Fetch surveys from backend using Retrofit&#10;            val retrofit = Retrofit.Builder()&#10;                .baseUrl(&quot;https://shb-backend.azurewebsites.net/&quot;)&#10;                .addConverterFactory(GsonConverterFactory.create())&#10;                .build()&#10;            val surveyApi = retrofit.create(SurveyApi::class.java)&#10;            val request = PurposeRequest(purpose = &quot;retrieveAndriod&quot;)&#10;            val response = withContext(Dispatchers.IO) { surveyApi.getSurveysRaw(request) }&#10;            surveys = response.result?.surveys ?: emptyList()&#10;            Log.d(&quot;SurveyActivity&quot;, &quot;Fetched ${surveys.size} surveys&quot;)&#10;            hideLoadingDialog()&#10;&#10;            if (isPaginatedView) {&#10;                val selectBox = findViewById&lt;android.widget.Spinner&gt;(R.id.spinnerCardsPerPage)&#10;                val pageSize = selectBox.selectedItem?.toString()?.toIntOrNull() ?: 5&#10;                showPaginatedView(pageSize)&#10;            } else {&#10;                showFullView(surveys)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun showFullView(surveys: List&lt;Survey&gt;) {&#10;        val surveyCardContainer: android.widget.LinearLayout = findViewById(R.id.surveyCardContainer)&#10;        val rvSurveys: androidx.recyclerview.widget.RecyclerView = findViewById(R.id.rvSurveys)&#10;        val footerControls = findViewById&lt;footer_pages_view&gt;(R.id.footerControls)&#10;        surveyCardContainer.visibility = View.VISIBLE&#10;        rvSurveys.visibility = View.GONE&#10;        footerControls.visibility = View.GONE&#10;        FullView().displaySurveysAsCards(this, surveyCardContainer, surveys)&#10;    }&#10;&#10;    private fun showPaginatedView(pageSize: Int) {&#10;        val surveyCardContainer: android.widget.LinearLayout = findViewById(R.id.surveyCardContainer)&#10;        val rvSurveys: androidx.recyclerview.widget.RecyclerView = findViewById(R.id.rvSurveys)&#10;        val footerControls = findViewById&lt;footer_pages_view&gt;(R.id.footerControls)&#10;        val selectBox = findViewById&lt;android.widget.Spinner&gt;(R.id.spinnerCardsPerPage)&#10;        // Set continuous card index options for paginated view&#10;        // val actualPageSize = cardsPerPagesView.getSelectedValue().trim().toIntOrNull()?.takeIf { it &gt; 0 } ?: pageSize&#10;        val actualPageSize = selectBox.selectedItem?.toString()?.toIntOrNull() ?: pageSize&#10;        surveyCardContainer.visibility = View.VISIBLE&#10;        rvSurveys.visibility = View.GONE&#10;        footerControls.visibility = View.VISIBLE&#10;        // Fetch paginated surveys from backend&#10;        CoroutineScope(Dispatchers.Main).launch {&#10;            val pageSurveys = withContext(Dispatchers.IO) {&#10;                com.ecss.shb_andriod.view.PaginatedView().getPaginatedSurveys(currentPage, actualPageSize)&#10;            }&#10;            val startIndex = (currentPage - 1) * actualPageSize&#10;            FullView().displaySurveysAsCards(this@SurveyActivity, surveyCardContainer, pageSurveys, startIndex)&#10;            updatePageInfo(actualPageSize)&#10;        }&#10;    }&#10;&#10;    private fun updatePageInfo(pageSize: Int) {&#10;        val footerControls = findViewById&lt;footer_pages_view&gt;(R.id.footerControls)&#10;        val tvPageInfo = footerControls.findViewById&lt;android.widget.TextView&gt;(R.id.tvPageInfo)&#10;        val totalPages = ((surveys.size + pageSize - 1) / pageSize).coerceAtLeast(1)&#10;        tvPageInfo.text = &quot;Page $currentPage of $totalPages&quot;&#10;    }&#10;&#10;    private fun showLoadingDialog() {&#10;        loadingView?.show()&#10;    }&#10;&#10;    private fun hideLoadingDialog() {&#10;        loadingView?.hide()&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/pages/TreeChartFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/pages/TreeChartFragment.kt" />
              <option name="updatedContent" value="package com.ecss.shb_andriod.pages&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.fragment.app.Fragment&#10;import com.ecss.shb_andriod.R&#10;import com.ecss.shb_andriod.view.TreeChartView&#10;&#10;class TreeChartFragment : Fragment() {&#10;    lateinit var treeChartView: TreeChartView&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?&#10;    ): View? {&#10;        val view = inflater.inflate(R.layout.fragment_tree_chart, container, false)&#10;        treeChartView = view.findViewById(R.id.treeChartView)&#10;        return view&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/view/CustomPieMarkerView.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/view/CustomPieMarkerView.kt" />
              <option name="updatedContent" value="package com.ecss.shb_andriod.view&#10;&#10;import android.content.Context&#10;import android.widget.TextView&#10;import com.github.mikephil.charting.components.MarkerView&#10;import com.github.mikephil.charting.data.Entry&#10;import com.github.mikephil.charting.highlight.Highlight&#10;import com.ecss.shb_andriod.R&#10;&#10;class CustomPieMarkerView(context: Context, layoutResource: Int) : MarkerView(context, layoutResource) {&#10;    private var breakdownMap: Map&lt;String, Map&lt;String, Int&gt;&gt; = emptyMap()&#10;&#10;    fun setBreakdownMap(breakdown: Map&lt;String, Map&lt;String, Int&gt;&gt;) {&#10;        breakdownMap = breakdown&#10;    }&#10;&#10;    override fun refreshContent(e: Entry?, highlight: Highlight?) {&#10;        val tvContent = findViewById&lt;TextView?&gt;(R.id.tvMarkerContent)&#10;        val label = e?.data?.let { (it as? Map&lt;*, *&gt;)?.get(&quot;breakdown&quot;) }?.toString() ?: &quot;&quot;&#10;        tvContent?.text = label&#10;        super.refreshContent(e, highlight)&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/view/CustomTooltipMarkerView.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/view/CustomTooltipMarkerView.kt" />
              <option name="originalContent" value="package com.ecss.shb_andriod.view&#10;&#10;import android.content.Context&#10;&#10;import android.widget.TextView&#10;import com.ecss.shb_andriod.R&#10;import com.github.mikephil.charting.components.MarkerView&#10;import com.github.mikephil.charting.data.Entry&#10;import com.github.mikephil.charting.data.PieEntry&#10;import com.github.mikephil.charting.highlight.Highlight&#10;import com.github.mikephil.charting.utils.MPPointF&#10;&#10;class CustomTooltipMarkerView(context: Context, layoutResource: Int) : MarkerView(context, layoutResource) {&#10;    private val tvLabel: TextView = findViewById(R.id.tvLabel)&#10;    private val tvValue: TextView = findViewById(R.id.tvValue)&#10;    private var columnEntries: List&lt;Entry&gt;? = null&#10;    private var breakdownMapByLabel: Map&lt;String, Map&lt;String, Int&gt;&gt; = emptyMap()&#10;&#10;    fun setColumnEntries(entries: List&lt;Entry&gt;?) {&#10;        columnEntries = entries&#10;    }&#10;&#10;    fun setBreakdownMap(map: Map&lt;String, Map&lt;String, Int&gt;&gt;) {&#10;        breakdownMapByLabel = map&#10;    }&#10;&#10;    override fun refreshContent(e: Entry?, highlight: Highlight?) {&#10;        if (e is PieEntry) {&#10;            val location = e.label&#10;            val total = e.value.toInt()&#10;            val breakdown = breakdownMapByLabel[location]&#10;            val order = listOf(&quot;Seen&quot;, &quot;Heard&quot;, &quot;Not found&quot;)&#10;            tvLabel.text = location&#10;            tvLabel.textSize = 12f&#10;            // Show breakdown in tvValue with colored spans&#10;            val spannable = android.text.SpannableStringBuilder()&#10;            // Total (white, always from breakdown sum if available)&#10;            val totalFromBreakdown = breakdown?.values?.sum() ?: total&#10;            val totalText = &quot;Total: $totalFromBreakdown\n&quot;&#10;            spannable.append(totalText)&#10;            spannable.setSpan(android.text.style.ForegroundColorSpan(android.graphics.Color.WHITE), 0, totalText.length, android.text.Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)&#10;            val colorMap = mapOf(&#10;                &quot;Seen&quot; to android.graphics.Color.BLUE, // Seen: blue&#10;                &quot;Heard&quot; to android.graphics.Color.GREEN, // Heard: green&#10;                &quot;Not found&quot; to android.graphics.Color.RED // Not found: red&#10;            )&#10;            order.forEach { key -&gt;&#10;                val value = breakdown?.get(key) ?: 0&#10;                val line = &quot;$key: $value\n&quot;&#10;                val start = spannable.length&#10;                spannable.append(line)&#10;                val end = spannable.length&#10;                val color = colorMap[key] ?: android.graphics.Color.WHITE&#10;                spannable.setSpan(android.text.style.ForegroundColorSpan(color), start, end, android.text.Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)&#10;            }&#10;            tvValue.text = spannable&#10;        } else if (e != null &amp;&amp; e.data is Map&lt;*, *&gt;) {&#10;            val dataMap = e.data as? Map&lt;String, Any&gt;&#10;            val label = dataMap?.get(&quot;label&quot;) as? String ?: &quot;&quot;&#10;            val breakdowns = dataMap?.get(&quot;breakdowns&quot;) as? Map&lt;String, Int&gt;&#10;            val order = listOf(&quot;Seen&quot;, &quot;Heard&quot;, &quot;Not found&quot;)&#10;            tvLabel.text = label&#10;            tvLabel.textSize = 12f&#10;            // Only sum Seen, Heard, Not found for total&#10;            val totalFromBreakdown = order.sumOf { breakdowns?.get(it) ?: 0 }&#10;            val spannable = android.text.SpannableStringBuilder()&#10;            val totalText = &quot;Total: $totalFromBreakdown\n&quot;&#10;            spannable.append(totalText)&#10;            spannable.setSpan(android.text.style.ForegroundColorSpan(android.graphics.Color.WHITE), 0, totalText.length, android.text.Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)&#10;            val colorMap = mapOf(&#10;                &quot;Seen&quot; to android.graphics.Color.BLUE,&#10;                &quot;Heard&quot; to android.graphics.Color.GREEN,&#10;                &quot;Not found&quot; to android.graphics.Color.RED&#10;            )&#10;            order.forEach { key -&gt;&#10;                val value = breakdowns?.get(key) ?: 0&#10;                val line = &quot;$key: $value\n&quot;&#10;                val start = spannable.length&#10;                spannable.append(line)&#10;                val end = spannable.length&#10;                val color = colorMap[key] ?: android.graphics.Color.WHITE&#10;                spannable.setSpan(android.text.style.ForegroundColorSpan(color), start, end, android.text.Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)&#10;            }&#10;            tvValue.text = spannable&#10;        } else {&#10;            tvLabel.text = &quot;&quot;&#10;            // Always show all keys with 0 if no data&#10;            val order = listOf(&quot;Seen&quot;, &quot;Heard&quot;, &quot;Not found&quot;)&#10;            val spannable = android.text.SpannableStringBuilder()&#10;            val totalText = &quot;Total: 0\n&quot;&#10;            spannable.append(totalText)&#10;            spannable.setSpan(android.text.style.ForegroundColorSpan(android.graphics.Color.WHITE), 0, totalText.length, android.text.Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)&#10;            val colorMap = mapOf(&#10;                &quot;Seen&quot; to android.graphics.Color.BLUE,&#10;                &quot;Heard&quot; to android.graphics.Color.GREEN,&#10;                &quot;Not found&quot; to android.graphics.Color.RED&#10;            )&#10;            order.forEach { key -&gt;&#10;                val line = &quot;$key: 0\n&quot;&#10;                val start = spannable.length&#10;                spannable.append(line)&#10;                val end = spannable.length&#10;                val color = colorMap[key] ?: android.graphics.Color.WHITE&#10;                spannable.setSpan(android.text.style.ForegroundColorSpan(color), start, end, android.text.Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)&#10;            }&#10;            tvValue.text = spannable&#10;        }&#10;        super.refreshContent(e, highlight)&#10;    }&#10;&#10;    private fun isMarkerActive(): Boolean {&#10;        // Implement logic to check if the marker should be active for the current chart&#10;        // For now, always return true. You can set a flag from your chart switching logic.&#10;        return true&#10;    }&#10;&#10;    override fun getOffset(): MPPointF {&#10;        // Shift the tooltip a little more to the left&#10;        val offsetX = -(width * 0.5f) // Make area smaller by reducing offset&#10;        val chartWidth = chartView?.width ?: 0&#10;        val chartHeight = chartView?.height ?: 0&#10;        val markerWidth = width&#10;        val markerHeight = height&#10;&#10;        // Calculate Y offset: show below if it would be cut off at the top, otherwise above&#10;        var offsetY = if (markerHeight + 32 &gt; chartHeight / 2) {&#10;            4f // show below the slice with less padding (higher)&#10;        } else {&#10;            -markerHeight.toFloat() - 10f // show above the slice with less padding (higher)&#10;        }&#10;        // Clamp Y so marker stays within chart vertically&#10;        offsetY = offsetY.coerceAtLeast(-markerHeight.toFloat())&#10;            .coerceAtMost(chartHeight - markerHeight.toFloat())&#10;&#10;        // Clamp X so marker stays within chart horizontally&#10;        val safeOffsetX = offsetX.coerceAtLeast(-markerWidth.toFloat())&#10;            .coerceAtMost(chartWidth - markerWidth.toFloat())&#10;        return MPPointF(safeOffsetX, offsetY)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.ecss.shb_andriod.view&#10;&#10;import android.content.Context&#10;&#10;import android.widget.TextView&#10;import com.ecss.shb_andriod.R&#10;import com.github.mikephil.charting.components.MarkerView&#10;import com.github.mikephil.charting.data.Entry&#10;import com.github.mikephil.charting.data.PieEntry&#10;import com.github.mikephil.charting.highlight.Highlight&#10;import com.github.mikephil.charting.utils.MPPointF&#10;&#10;class CustomTooltipMarkerView(context: Context, layoutResource: Int) : MarkerView(context, layoutResource) {&#10;    private val tvLabel: TextView = findViewById(R.id.tvLabel)&#10;    private val tvValue: TextView = findViewById(R.id.tvValue)&#10;    private var columnEntries: List&lt;Entry&gt;? = null&#10;    private var breakdownMapByLabel: Map&lt;String, Map&lt;String, Int&gt;&gt; = emptyMap()&#10;&#10;    fun setColumnEntries(entries: List&lt;Entry&gt;?) {&#10;        columnEntries = entries&#10;    }&#10;&#10;    fun setBreakdownMap(map: Map&lt;String, Map&lt;String, Int&gt;&gt;) {&#10;        breakdownMapByLabel = map&#10;    }&#10;&#10;    override fun refreshContent(e: Entry?, highlight: Highlight?) {&#10;        if (e is PieEntry) {&#10;            val location = e.label&#10;            val total = e.value.toInt()&#10;            val breakdown = breakdownMapByLabel[location]&#10;            val order = listOf(&quot;Seen&quot;, &quot;Heard&quot;, &quot;Not found&quot;)&#10;            tvLabel.text = location&#10;            tvLabel.textSize = 12f&#10;            // Show breakdown in tvValue with colored spans&#10;            val spannable = android.text.SpannableStringBuilder()&#10;            // Total (white, always from breakdown sum if available)&#10;            val totalFromBreakdown = breakdown?.values?.sum() ?: total&#10;            val totalText = &quot;Total: $totalFromBreakdown\n&quot;&#10;            spannable.append(totalText)&#10;            spannable.setSpan(android.text.style.ForegroundColorSpan(android.graphics.Color.WHITE), 0, totalText.length, android.text.Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)&#10;            val colorMap = mapOf(&#10;                &quot;Seen&quot; to android.graphics.Color.BLUE, // Seen: blue&#10;                &quot;Heard&quot; to android.graphics.Color.GREEN, // Heard: green&#10;                &quot;Not found&quot; to android.graphics.Color.RED // Not found: red&#10;            )&#10;            order.forEach { key -&gt;&#10;                val value = breakdown?.get(key) ?: 0&#10;                val line = &quot;$key: $value\n&quot;&#10;                val start = spannable.length&#10;                spannable.append(line)&#10;                val end = spannable.length&#10;                val color = colorMap[key] ?: android.graphics.Color.WHITE&#10;                spannable.setSpan(android.text.style.ForegroundColorSpan(color), start, end, android.text.Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)&#10;            }&#10;            tvValue.text = spannable&#10;        } else if (e != null &amp;&amp; e.data is Map&lt;*, *&gt;) {&#10;            val dataMap = e.data as? Map&lt;String, Any&gt;&#10;            val label = dataMap?.get(&quot;label&quot;) as? String ?: &quot;&quot;&#10;            val breakdowns = dataMap?.get(&quot;breakdowns&quot;) as? Map&lt;String, Int&gt;&#10;            val order = listOf(&quot;Seen&quot;, &quot;Heard&quot;, &quot;Not found&quot;)&#10;            tvLabel.text = label&#10;            tvLabel.textSize = 12f&#10;            // Always show the total for the month-year, regardless of which dot is selected&#10;            val totalFromBreakdown = order.sumOf { breakdowns?.get(it) ?: 0 }&#10;            val spannable = android.text.SpannableStringBuilder()&#10;            val totalText = &quot;Total: $totalFromBreakdown\n&quot;&#10;            spannable.append(totalText)&#10;            spannable.setSpan(android.text.style.ForegroundColorSpan(android.graphics.Color.WHITE), 0, totalText.length, android.text.Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)&#10;            val colorMap = mapOf(&#10;                &quot;Seen&quot; to android.graphics.Color.BLUE,&#10;                &quot;Heard&quot; to android.graphics.Color.GREEN,&#10;                &quot;Not found&quot; to android.graphics.Color.RED&#10;            )&#10;            order.forEach { key -&gt;&#10;                val value = breakdowns?.get(key) ?: 0&#10;                val line = &quot;$key: $value\n&quot;&#10;                val start = spannable.length&#10;                spannable.append(line)&#10;                val end = spannable.length&#10;                val color = colorMap[key] ?: android.graphics.Color.WHITE&#10;                spannable.setSpan(android.text.style.ForegroundColorSpan(color), start, end, android.text.Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)&#10;            }&#10;            tvValue.text = spannable&#10;        } else {&#10;            tvLabel.text = &quot;&quot;&#10;            // Always show all keys with 0 if no data&#10;            val order = listOf(&quot;Seen&quot;, &quot;Heard&quot;, &quot;Not found&quot;)&#10;            val spannable = android.text.SpannableStringBuilder()&#10;            val totalText = &quot;Total: 0\n&quot;&#10;            spannable.append(totalText)&#10;            spannable.setSpan(android.text.style.ForegroundColorSpan(android.graphics.Color.WHITE), 0, totalText.length, android.text.Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)&#10;            val colorMap = mapOf(&#10;                &quot;Seen&quot; to android.graphics.Color.BLUE,&#10;                &quot;Heard&quot; to android.graphics.Color.GREEN,&#10;                &quot;Not found&quot; to android.graphics.Color.RED&#10;            )&#10;            order.forEach { key -&gt;&#10;                val line = &quot;$key: 0\n&quot;&#10;                val start = spannable.length&#10;                spannable.append(line)&#10;                val end = spannable.length&#10;                val color = colorMap[key] ?: android.graphics.Color.WHITE&#10;                spannable.setSpan(android.text.style.ForegroundColorSpan(color), start, end, android.text.Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)&#10;            }&#10;            tvValue.text = spannable&#10;        }&#10;        super.refreshContent(e, highlight)&#10;    }&#10;&#10;    private fun isMarkerActive(): Boolean {&#10;        // Implement logic to check if the marker should be active for the current chart&#10;        // For now, always return true. You can set a flag from your chart switching logic.&#10;        return true&#10;    }&#10;&#10;    override fun getOffset(): MPPointF {&#10;        // Shift the tooltip a little more to the left&#10;        val offsetX = -(width * 0.5f) // Make area smaller by reducing offset&#10;        val chartWidth = chartView?.width ?: 0&#10;        val chartHeight = chartView?.height ?: 0&#10;        val markerWidth = width&#10;        val markerHeight = height&#10;&#10;        // Calculate Y offset: show below if it would be cut off at the top, otherwise above&#10;        var offsetY = if (markerHeight + 32 &gt; chartHeight / 2) {&#10;            4f // show below the slice with less padding (higher)&#10;        } else {&#10;            -markerHeight.toFloat() - 10f // show above the slice with less padding (higher)&#10;        }&#10;        // Clamp Y so marker stays within chart vertically&#10;        offsetY = offsetY.coerceAtLeast(-markerHeight.toFloat())&#10;            .coerceAtMost(chartHeight - markerHeight.toFloat())&#10;&#10;        // Clamp X so marker stays within chart horizontally&#10;        val safeOffsetX = offsetX.coerceAtLeast(-markerWidth.toFloat())&#10;            .coerceAtMost(chartWidth - markerWidth.toFloat())&#10;        return MPPointF(safeOffsetX, offsetY)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/view/DataVisualizationView.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/view/DataVisualizationView.kt" />
              <option name="originalContent" value="package com.ecss.shb_andriod.view&#10;&#10;import android.content.Context&#10;import android.util.AttributeSet&#10;import android.widget.FrameLayout&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.ecss.shb_andriod.adapter.PieChartAdapter&#10;&#10;class DataVisualizationView @JvmOverloads constructor(&#10;    context: Context,&#10;    attrs: AttributeSet? = null,&#10;    defStyleAttr: Int = 0&#10;) : FrameLayout(context, attrs, defStyleAttr) {&#10;    private val recyclerView: RecyclerView = RecyclerView(context)&#10;&#10;    init {&#10;        &#10;        recyclerView.layoutManager = LinearLayoutManager(context)&#10;        val params = LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT)&#10;        recyclerView.layoutParams = params&#10;        addView(recyclerView)&#10;    }&#10;    &#10;}&#10;" />
              <option name="updatedContent" value="package com.ecss.shb_andriod.view&#10;&#10;import android.content.Context&#10;import android.util.AttributeSet&#10;import android.widget.FrameLayout&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.ecss.shb_andriod.adapter.PieChartAdapter&#10;&#10;class DataVisualizationView @JvmOverloads constructor(&#10;    context: Context,&#10;    attrs: AttributeSet? = null,&#10;    defStyleAttr: Int = 0&#10;) : FrameLayout(context, attrs, defStyleAttr) {&#10;    private val recyclerView: RecyclerView = RecyclerView(context)&#10;&#10;    init {&#10;        recyclerView.layoutManager = LinearLayoutManager(context)&#10;        val params = LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT)&#10;        recyclerView.layoutParams = params&#10;        addView(recyclerView)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/view/PieChartView.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ecss/shb_andriod/view/PieChartView.kt" />
              <option name="updatedContent" value="package com.ecss.shb_andriod.view&#10;&#10;import android.content.Context&#10;import android.util.AttributeSet&#10;import android.view.LayoutInflater&#10;import android.widget.FrameLayout&#10;import com.github.mikephil.charting.charts.PieChart&#10;import com.github.mikephil.charting.data.PieData&#10;import com.github.mikephil.charting.data.PieDataSet&#10;import com.github.mikephil.charting.data.PieEntry&#10;import com.ecss.shb_andriod.R&#10;&#10;class PieChartView @JvmOverloads constructor(&#10;    context: Context,&#10;    attrs: AttributeSet? = null,&#10;    defStyleAttr: Int = 0&#10;) : FrameLayout(context, attrs, defStyleAttr) {&#10;    private val pieChart: PieChart&#10;&#10;    init {&#10;        val view = LayoutInflater.from(context).inflate(R.layout.item_piechart, this, true)&#10;        pieChart = view.findViewById(R.id.pieChart)&#10;        pieChart.isRotationEnabled = false&#10;        pieChart.isDrawHoleEnabled = false&#10;        pieChart.holeRadius = 0f&#10;        pieChart.scaleX = 1.0f&#10;        pieChart.scaleY = 1.0f&#10;    }&#10;&#10;    fun setPieChartData(entries: List&lt;PieEntry&gt;) {&#10;        if (entries.isEmpty()) {&#10;            pieChart.clear()&#10;            pieChart.invalidate()&#10;            return&#10;        }&#10;        val dataSet = PieDataSet(entries, &quot;&quot;)&#10;        val colorConstants = listOf(&#10;            android.graphics.Color.DKGRAY,&#10;            android.graphics.Color.RED,&#10;            android.graphics.Color.BLUE,&#10;            android.graphics.Color.GRAY,&#10;            android.graphics.Color.GREEN,&#10;            android.graphics.Color.MAGENTA,&#10;            android.graphics.Color.LTGRAY&#10;        )&#10;        val colors = entries.indices.map { i -&gt;&#10;            colorConstants[i % colorConstants.size]&#10;        }&#10;        dataSet.colors = colors&#10;        dataSet.setDrawValues(false)&#10;        dataSet.valueTextColor = android.graphics.Color.TRANSPARENT&#10;        dataSet.valueTextSize = 0f&#10;        val pieData = PieData(dataSet)&#10;        pieChart.data = pieData&#10;        pieChart.legend.isEnabled = false&#10;        pieChart.description.isEnabled = false&#10;        pieChart.setDrawEntryLabels(false)&#10;        pieChart.setEntryLabelColor(android.graphics.Color.TRANSPARENT)&#10;        pieChart.setEntryLabelTextSize(0f)&#10;        pieChart.setExtraOffsets(0f, 0f, 0f, 0f)&#10;        pieChart.invalidate()&#10;    }&#10;&#10;    fun showPieChart(entries: List&lt;PieEntry&gt;) {&#10;        this.visibility = VISIBLE&#10;        setPieChartData(entries)&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_arrow_back.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_arrow_back.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFFFF&quot;&#10;        android:pathData=&quot;M20,11H7.83l5.59-5.59L12,4l-8,8 8,8 1.41-1.41L7.83,13H20v-2z&quot;/&gt;&#10;&lt;/vector&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_arrow_drop_down.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_arrow_drop_down.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FF000000&quot;&#10;        android:pathData=&quot;M7.41,8.41L12,13l4.59,-4.59L18,9.83l-6,6-6,-6z&quot;/&gt;&#10;&lt;/vector&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_arrow_drop_up.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_arrow_drop_up.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FF000000&quot;&#10;        android:pathData=&quot;M7.41,15.59L12,11l4.59,4.59L18,14.17l-6,-6-6,6z&quot;/&gt;&#10;&lt;/vector&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_calendar_month.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_calendar_month.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FF388E3C&quot;&#10;        android:pathData=&quot;M19,3h-1V1h-2v2H8V1H6v2H5c-1.1,0-2,0.9-2,2v16c0,1.1,0.9,2,2,2h14c1.1,0,2-0.9,2-2V5c0-1.1-0.9-2-2-2zm0,18H5V8h14v13zm-7-3c-2.21,0-4-1.79-4-4h2c0,1.1,0.9,2,2,2s2-0.9,2-2-0.9-2-2-2c-2.21,0-4-1.79-4-4s1.79-4,4-4 4,1.79,4,4h-2c0-1.1-0.9-2-2-2s-2,0.9-2,2 0.9,2 2,2c2.21,0,4,1.79,4,4s-1.79,4-4,4z&quot;/&gt;&#10;&lt;/vector&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_expand_less.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_expand_less.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FF000000&quot;&#10;        android:pathData=&quot;M7.41,15.59L12,11l4.59,4.59L18,14.17l-6,-6-6,6z&quot;/&gt;&#10;&lt;/vector&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_expand_more.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_expand_more.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FF000000&quot;&#10;        android:pathData=&quot;M7.41,8.59L12,13.17l4.59,-4.58L18,10l-6,6-6,-6z&quot;/&gt;&#10;&lt;/vector&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_home.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_home.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFFFF&quot;&#10;        android:pathData=&quot;M10,20v-6h4v6h5v-8h3L12,3 2,12h3v8z&quot;/&gt;&#10;&lt;/vector&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_park.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_park.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFA000&quot;&#10;        android:pathData=&quot;M21,19V5c0-1.1-0.9-2-2-2H5c-1.1,0-2,0.9-2,2v14c0,1.1,0.9,2,2,2h14c1.1,0,2-0.9,2-2zM5,5h14v14H5V5zm7,12c-2.76,0-5-2.24-5-5s2.24-5,5-5 5,2.24,5,5-2.24,5-5,5zm0-8c-1.65,0-3,1.35-3,3s1.35,3,3,3 3-1.35,3-3-1.35-3-3-3z&quot;/&gt;&#10;&lt;/vector&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_rewind.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_rewind.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFFFF&quot;&#10;        android:pathData=&quot;M12,5v2c3.86,0 7,3.14 7,7s-3.14,7-7,7-7-3.14-7-7h2c0,2.76 2.24,5 5,5s5-2.24 5-5-2.24-5-5-5V13l-4-4 4-4v2z&quot;/&gt;&#10;&lt;/vector&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_survey.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_survey.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;!-- Header controls with Toggle View Mode and Home button --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/headerControls&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center_vertical&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;!-- Toggle View Mode button (move to extreme left) --&gt;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnToggleViewMode&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Paginated View&quot;&#10;            android:layout_gravity=&quot;center_vertical&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;!-- Label for Spinner --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/labelCardsPerPage&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Cards per page&quot;&#10;            android:visibility=&quot;gone&quot;&#10;            android:layout_gravity=&quot;center_vertical&quot;&#10;            android:layout_marginEnd=&quot;4dp&quot; /&gt;&#10;&#10;        &lt;!-- Spinner for Cards Per Page selection --&gt;&#10;        &lt;Spinner&#10;            android:id=&quot;@+id/spinnerCardsPerPage&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:visibility=&quot;gone&quot;&#10;            android:layout_gravity=&quot;center_vertical&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Home button fixed at the extreme right --&gt;&#10;    &lt;ImageButton&#10;        android:id=&quot;@+id/btnHome&quot;&#10;        android:layout_width=&quot;48dp&quot;&#10;        android:layout_height=&quot;48dp&quot;&#10;        android:src=&quot;@drawable/ic_home_white_24dp&quot;&#10;        android:contentDescription=&quot;Home&quot;&#10;        android:background=&quot;@android:color/transparent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        android:layout_margin=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;!-- Make the body scrollable --&gt;&#10;    &lt;ScrollView&#10;        android:id=&quot;@+id/scrollBody&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/headerControls&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@id/footerControls&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;            &lt;!-- Cards per page view --&gt;&#10;            &lt;com.ecss.shb_andriod.view.CardsPerPagesView&#10;                android:id=&quot;@+id/cardsPerPagesView&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                android:visibility=&quot;gone&quot; /&gt;&#10;&#10;            &lt;!-- Survey card container --&gt;&#10;            &lt;LinearLayout&#10;                android:id=&quot;@+id/surveyCardContainer&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                android:visibility=&quot;visible&quot; /&gt;&#10;&#10;            &lt;!-- RecyclerView for surveys (used in showFullView/showPaginatedView logic) --&gt;&#10;            &lt;androidx.recyclerview.widget.RecyclerView&#10;                android:id=&quot;@+id/rvSurveys&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:visibility=&quot;gone&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/ScrollView&gt;&#10;&#10;    &lt;!-- Footer controls for pagination --&gt;&#10;    &lt;com.ecss.shb_andriod.view.footer_pages_view&#10;        android:id=&quot;@+id/footerControls&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        android:background=&quot;#000000&quot;&#10;        android:elevation=&quot;8dp&quot;&#10;        android:visibility=&quot;gone&quot; /&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;!-- Header controls with Toggle View Mode and Home button --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/headerControls&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center_vertical&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;!-- Toggle View Mode button (move to extreme left) --&gt;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnToggleViewMode&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Paginated View&quot;&#10;            android:layout_gravity=&quot;center_vertical&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;!-- Label for Spinner --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/labelCardsPerPage&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Cards per page&quot;&#10;            android:visibility=&quot;gone&quot;&#10;            android:layout_gravity=&quot;center_vertical&quot;&#10;            android:layout_marginEnd=&quot;4dp&quot; /&gt;&#10;&#10;        &lt;!-- Spinner for Cards Per Page selection --&gt;&#10;        &lt;Spinner&#10;            android:id=&quot;@+id/spinnerCardsPerPage&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:visibility=&quot;gone&quot;&#10;            android:layout_gravity=&quot;center_vertical&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Home button fixed at the extreme right --&gt;&#10;    &lt;ImageButton&#10;        android:id=&quot;@+id/btnHome&quot;&#10;        android:layout_width=&quot;48dp&quot;&#10;        android:layout_height=&quot;48dp&quot;&#10;        android:src=&quot;@drawable/ic_home_white_24dp&quot;&#10;        android:contentDescription=&quot;Home&quot;&#10;        android:background=&quot;@android:color/transparent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        android:layout_margin=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;!-- Make the body scrollable --&gt;&#10;    &lt;ScrollView&#10;        android:id=&quot;@+id/scrollBody&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/headerControls&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@id/footerControls&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;            &lt;!-- Cards per page view --&gt;&#10;            &lt;com.ecss.shb_andriod.view.CardsPerPagesView&#10;                android:id=&quot;@+id/cardsPerPagesView&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                android:visibility=&quot;gone&quot; /&gt;&#10;&#10;            &lt;!-- Survey card container --&gt;&#10;            &lt;LinearLayout&#10;                android:id=&quot;@+id/surveyCardContainer&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                android:visibility=&quot;visible&quot; /&gt;&#10;&#10;            &lt;!-- RecyclerView for surveys (used in showFullView/showPaginatedView logic) --&gt;&#10;            &lt;androidx.recyclerview.widget.RecyclerView&#10;                android:id=&quot;@+id/rvSurveys&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:visibility=&quot;gone&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/ScrollView&gt;&#10;&#10;    &lt;!-- Footer controls for pagination --&gt;&#10;    &lt;com.ecss.shb_andriod.view.footer_pages_view&#10;        android:id=&quot;@+id/footerControls&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        android:background=&quot;#000000&quot;&#10;        android:elevation=&quot;8dp&quot;&#10;        android:visibility=&quot;gone&quot; /&gt;&#10;&#10;    &lt;!-- Top App Bar with menu --&gt;&#10;    &lt;com.google.android.material.appbar.MaterialToolbar&#10;        android:id=&quot;@+id/topAppBar&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;?attr/actionBarSize&quot;&#10;        android:background=&quot;@color/design_default_color_primary&quot;&#10;        android:elevation=&quot;4dp&quot;&#10;        android:fitsSystemWindows=&quot;false&quot;&#10;        app:menu=&quot;@menu/menu_toolbar_data_visualization&quot; /&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/drawer_item_group.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/drawer_item_group.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;48dp&quot;&#10;    android:orientation=&quot;horizontal&quot;&#10;    android:gravity=&quot;center_vertical&quot;&#10;    android:paddingStart=&quot;16dp&quot;&#10;    android:paddingEnd=&quot;16dp&quot;&gt;&#10;&#10;    &lt;ImageView&#10;        android:id=&quot;@+id/icon&quot;&#10;        android:layout_width=&quot;24dp&quot;&#10;        android:layout_height=&quot;24dp&quot;&#10;        android:layout_marginEnd=&quot;16dp&quot;&#10;        android:contentDescription=&quot;@null&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/title&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:textColor=&quot;@android:color/white&quot; /&gt;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;48dp&quot;&#10;    android:orientation=&quot;horizontal&quot;&#10;    android:gravity=&quot;center_vertical&quot;&#10;    android:paddingStart=&quot;16dp&quot;&#10;    android:paddingEnd=&quot;16dp&quot;&gt;&#10;&#10;    &lt;ImageView&#10;        android:id=&quot;@+id/icon&quot;&#10;        android:layout_width=&quot;24dp&quot;&#10;        android:layout_height=&quot;24dp&quot;&#10;        android:layout_marginEnd=&quot;16dp&quot;&#10;        android:contentDescription=&quot;@null&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/title&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:textColor=&quot;@color/drawer_text&quot; /&gt;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/drawer_item_parent.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/drawer_item_parent.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;48dp&quot;&#10;    android:orientation=&quot;horizontal&quot;&#10;    android:gravity=&quot;center_vertical&quot;&#10;    android:paddingStart=&quot;16dp&quot;&#10;    android:paddingEnd=&quot;16dp&quot;&#10;    android:background=&quot;?attr/selectableItemBackground&quot;&gt;&#10;&#10;    &lt;ImageView&#10;        android:id=&quot;@+id/drawerParentIcon&quot;&#10;        android:layout_width=&quot;24dp&quot;&#10;        android:layout_height=&quot;24dp&quot;&#10;        android:layout_marginEnd=&quot;16dp&quot;&#10;        android:contentDescription=&quot;icon&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/drawerParentTitle&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:textColor=&quot;@android:color/black&quot;&#10;        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;    &lt;ImageView&#10;        android:id=&quot;@+id/drawerParentArrow&quot;&#10;        android:layout_width=&quot;24dp&quot;&#10;        android:layout_height=&quot;24dp&quot;&#10;        android:contentDescription=&quot;expand/collapse arrow&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/drawer_item_simple.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/drawer_item_simple.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;48dp&quot;&#10;    android:orientation=&quot;horizontal&quot;&#10;    android:gravity=&quot;center_vertical&quot;&#10;    android:paddingStart=&quot;16dp&quot;&#10;    android:paddingEnd=&quot;16dp&quot;&gt;&#10;&#10;    &lt;ImageView&#10;        android:id=&quot;@+id/icon&quot;&#10;        android:layout_width=&quot;24dp&quot;&#10;        android:layout_height=&quot;24dp&quot;&#10;        android:layout_marginEnd=&quot;16dp&quot;&#10;        android:contentDescription=&quot;@null&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/title&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:textColor=&quot;@android:color/white&quot; /&gt;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;48dp&quot;&#10;    android:orientation=&quot;horizontal&quot;&#10;    android:gravity=&quot;center_vertical&quot;&#10;    android:paddingStart=&quot;16dp&quot;&#10;    android:paddingEnd=&quot;16dp&quot;&gt;&#10;&#10;    &lt;ImageView&#10;        android:id=&quot;@+id/icon&quot;&#10;        android:layout_width=&quot;24dp&quot;&#10;        android:layout_height=&quot;24dp&quot;&#10;        android:layout_marginEnd=&quot;16dp&quot;&#10;        android:contentDescription=&quot;@null&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/title&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:textColor=&quot;@color/drawer_text&quot; /&gt;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/drawer_with_welcome.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/drawer_with_welcome.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;280dp&quot;&#10;    android:minWidth=&quot;200dp&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:layout_gravity=&quot;start&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;@color/drawer_background&quot;&#10;    android:fitsSystemWindows=&quot;false&quot;&gt;&#10;&#10;    &lt;!-- Welcome Section --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/drawerWelcome&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:padding=&quot;24dp&quot;&#10;        android:text=&quot;Welcome!&quot;&#10;        android:textAppearance=&quot;@style/TextAppearance.AppCompat.Large&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textColor=&quot;@android:color/white&quot;&#10;        android:gravity=&quot;center&quot; /&gt;&#10;&#10;    &lt;!-- Drawer Items --&gt;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/drawerRecyclerView&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:background=&quot;@color/drawer_background&quot;&#10;        android:fitsSystemWindows=&quot;false&quot; /&gt;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;280dp&quot;&#10;    android:minWidth=&quot;200dp&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:layout_gravity=&quot;start&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;@color/drawer_background&quot;&#10;    android:fitsSystemWindows=&quot;false&quot;&gt;&#10;&#10;    &lt;!-- Welcome Section --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/drawerWelcome&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:padding=&quot;24dp&quot;&#10;        android:text=&quot;Welcome!&quot;&#10;        android:textAppearance=&quot;@style/TextAppearance.AppCompat.Large&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textColor=&quot;@color/drawer_text&quot;&#10;        android:gravity=&quot;center&quot; /&gt;&#10;&#10;    &lt;!-- Drawer Items --&gt;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/drawerRecyclerView&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:background=&quot;@color/drawer_background&quot;&#10;        android:fitsSystemWindows=&quot;false&quot; /&gt;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_line_chart.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_line_chart.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;    &lt;HorizontalScrollView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:fillViewport=&quot;true&quot;&#10;        android:layout_gravity=&quot;center&quot;&gt;&#10;        &lt;FrameLayout&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&gt;&#10;            &lt;com.github.mikephil.charting.charts.LineChart&#10;                android:id=&quot;@+id/lineChart&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;260dp&quot;&#10;                android:minWidth=&quot;1000dp&quot;&#10;                android:layout_gravity=&quot;left&quot; /&gt;&#10;        &lt;/FrameLayout&gt;&#10;    &lt;/HorizontalScrollView&gt;&#10;&lt;/FrameLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;    &lt;com.github.mikephil.charting.charts.LineChart&#10;        android:id=&quot;@+id/lineChart&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;260dp&quot;&#10;        android:layout_gravity=&quot;center&quot; /&gt;&#10;&lt;/FrameLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_footer.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_footer.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnFirstPage&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;&amp;#60;&amp;#60;&quot;&#10;        android:background=&quot;@android:color/transparent&quot;&#10;        android:textColor=&quot;@android:color/white&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot; /&gt;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnPrevPage&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;&amp;#60;&quot;&#10;        android:background=&quot;@android:color/transparent&quot;&#10;        android:textColor=&quot;@android:color/white&quot;&#10;        app:layout_constraintStart_toEndOf=&quot;@id/btnFirstPage&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvPageInfo&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Page 1 of 1&quot;&#10;        android:textAppearance=&quot;@android:style/TextAppearance.Medium&quot;&#10;        android:textColor=&quot;@android:color/white&quot;&#10;        app:layout_constraintStart_toEndOf=&quot;@id/btnPrevPage&quot;&#10;        app:layout_constraintEnd_toStartOf=&quot;@id/btnNextPage&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintHorizontal_bias=&quot;0.5&quot; /&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnNextPage&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;&amp;#62;&quot;&#10;        android:background=&quot;@android:color/transparent&quot;&#10;        android:textColor=&quot;@android:color/white&quot;&#10;        app:layout_constraintEnd_toStartOf=&quot;@id/btnLastPage&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot; /&gt;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnLastPage&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;&amp;#62;&amp;#62;&quot;&#10;        android:background=&quot;@android:color/transparent&quot;&#10;        android:textColor=&quot;@android:color/white&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot; /&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnFirstPage&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;&amp;#60;&amp;#60;&quot;&#10;        android:background=&quot;@android:color/transparent&quot;&#10;        android:textColor=&quot;@color/drawer_text&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot; /&gt;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnPrevPage&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;&amp;#60;&quot;&#10;        android:background=&quot;@android:color/transparent&quot;&#10;        android:textColor=&quot;@color/drawer_text&quot;&#10;        app:layout_constraintStart_toEndOf=&quot;@id/btnFirstPage&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvPageInfo&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Page 1 of 1&quot;&#10;        android:textAppearance=&quot;@android:style/TextAppearance.Medium&quot;&#10;        android:textColor=&quot;@color/drawer_text&quot;&#10;        app:layout_constraintStart_toEndOf=&quot;@id/btnPrevPage&quot;&#10;        app:layout_constraintEnd_toStartOf=&quot;@id/btnNextPage&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintHorizontal_bias=&quot;0.5&quot; /&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnNextPage&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;&amp;#62;&quot;&#10;        android:background=&quot;@android:color/transparent&quot;&#10;        android:textColor=&quot;@color/drawer_text&quot;&#10;        app:layout_constraintEnd_toStartOf=&quot;@id/btnLastPage&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot; /&gt;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnLastPage&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;&amp;#62;&amp;#62;&quot;&#10;        android:background=&quot;@android:color/transparent&quot;&#10;        android:textColor=&quot;@color/drawer_text&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot; /&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_piechart.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_piechart.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;300dp&quot;&#10;    android:background=&quot;@android:color/transparent&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/pieChartTitle&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Pie Chart Title&quot;&#10;        android:textColor=&quot;@android:color/white&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textSize=&quot;18sp&quot;&#10;        android:layout_gravity=&quot;top|center_horizontal&quot;&#10;        android:padding=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;com.github.mikephil.charting.charts.PieChart&#10;        android:id=&quot;@+id/pieChart&quot;&#10;        android:layout_width=&quot;220dp&quot;&#10;        android:layout_height=&quot;220dp&quot;&#10;        android:layout_gravity=&quot;center&quot; /&gt;&#10;&#10;&lt;/FrameLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;300dp&quot;&#10;    android:background=&quot;@android:color/transparent&quot;&gt;&#10;&#10;    &lt;com.github.mikephil.charting.charts.PieChart&#10;        android:id=&quot;@+id/pieChart&quot;&#10;        android:layout_width=&quot;220dp&quot;&#10;        android:layout_height=&quot;220dp&quot;&#10;        android:layout_gravity=&quot;center&quot; /&gt;&#10;&#10;&lt;/FrameLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/nav_header_main.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/nav_header_main.xml" />
              <option name="originalContent" value="&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;120dp&quot;&#10;    android:gravity=&quot;bottom&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Welcome&quot;&#10;        android:textColor=&quot;@android:color/white&quot;&#10;        android:textSize=&quot;20sp&quot;&#10;        android:textStyle=&quot;bold&quot;/&gt;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;120dp&quot;&#10;    android:gravity=&quot;bottom&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Welcome&quot;&#10;        android:textColor=&quot;@color/drawer_text&quot;&#10;        android:textSize=&quot;20sp&quot;&#10;        android:textStyle=&quot;bold&quot;/&gt;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/menu/drawer_menu.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/menu/drawer_menu.xml" />
              <option name="originalContent" value="&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_surveys&quot;&#10;        android:title=&quot;Surveys&quot;&#10;        android:icon=&quot;@android:drawable/ic_menu_agenda&quot; /&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_events&quot;&#10;        android:title=&quot;Events&quot;&#10;        android:icon=&quot;@android:drawable/ic_menu_my_calendar&quot; /&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_settings&quot;&#10;        android:title=&quot;Settings&quot;&#10;        android:icon=&quot;@android:drawable/ic_menu_preferences&quot; /&gt;&#10;&lt;/menu&gt;&#10;" />
              <option name="updatedContent" value="&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_surveys&quot;&#10;        android:title=&quot;Surveys&quot;&#10;        android:icon=&quot;@android:drawable/ic_menu_agenda&quot;&gt;&#10;        &lt;menu&gt;&#10;            &lt;item&#10;                android:id=&quot;@+id/nav_data_visualization&quot;&#10;                android:title=&quot;Data Visualization&quot;&#10;                android:icon=&quot;@android:drawable/ic_menu_view&quot; /&gt;&#10;            &lt;item&#10;                android:id=&quot;@+id/nav_survey&quot;&#10;                android:title=&quot;Survey&quot;&#10;                android:icon=&quot;@android:drawable/ic_menu_edit&quot; /&gt;&#10;            &lt;item&#10;                android:id=&quot;@+id/nav_map&quot;&#10;                android:title=&quot;Map&quot;&#10;                android:icon=&quot;@android:drawable/ic_menu_mapmode&quot; /&gt;&#10;        &lt;/menu&gt;&#10;    &lt;/item&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_events&quot;&#10;        android:title=&quot;Events&quot;&#10;        android:icon=&quot;@android:drawable/ic_menu_my_calendar&quot; /&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_settings&quot;&#10;        android:title=&quot;Settings&quot;&#10;        android:icon=&quot;@android:drawable/ic_menu_preferences&quot; /&gt;&#10;&lt;/menu&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/menu/menu_toolbar_data_visualization.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/menu/menu_toolbar_data_visualization.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/action_back&quot;&#10;        android:icon=&quot;@android:drawable/ic_media_previous&quot;&#10;        android:title=&quot;Back&quot;&#10;        android:showAsAction=&quot;always&quot; /&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/action_home&quot;&#10;        android:icon=&quot;@android:drawable/ic_menu_view&quot;&#10;        android:title=&quot;Home&quot;&#10;        android:showAsAction=&quot;always&quot; /&gt;&#10;&lt;/menu&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values-night/colors.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values-night/colors.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;color name=&quot;background_main&quot;&gt;#222222&lt;/color&gt;&#10;    &lt;color name=&quot;text_main&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;drawer_background&quot;&gt;#222222&lt;/color&gt;&#10;    &lt;color name=&quot;drawer_text&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;!-- Add other dark mode color overrides as needed --&gt;&#10;&lt;/resources&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>